!function(t){var e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(i,s,function(e){return t[e]}.bind(null,s));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t){t.exports=JSON.parse('{"idle":{"right":[{"ms":[1000,4000],"random":true,"cells":[[null,"b","b"],["|","_","|"],["!",null,"!"]]},{"ms":500,"cells":[[null,"d","d"],["|","_","|"],["!",null,"!"]]},{"ms":500,"cells":[[null,"L","L"],["|","_","|"],["!",null,"!"]]},{"ms":2500,"cells":[[null,"b","b"],["<","_","|"],["!",null,"!"]]},{"ms":2500,"cells":[[null,"b","b"],["|","_",">"],["!",null,"!"]]}],"left":[{"ms":8000,"cells":[["d","d",null],["|","_","|"],["!",null,"!"]]},{"ms":500,"cells":[["d","d",null],["|","_","|"],["!",null,"!"]]},{"ms":500,"cells":[["L","L",null],["|","_","|"],["!",null,"!"]]},{"ms":2500,"cells":[["d","d",null],["<","_","|"],["!",null,"!"]]},{"ms":2500,"cells":[["b","b",null],["|","_",">"],["!",null,"!"]]}]},"move":{"left":[{"ms":200,"cells":[["d","d",null],["|","_","|"],["\'",null,"!"]]},{"ms":200,"cells":[["d","d",null],["|","_","|"],["!",null,"\'"]]}],"right":[{"ms":200,"cells":[[null,"b","b"],["|","_","|"],["!",null,"\'"]]},{"ms":200,"cells":[[null,"b","b"],["|","_","|"],["\'",null,"!"]]}]}}')},function(t){t.exports=JSON.parse('{"idle":{"right":[{"ms":[500,1000],"random":true,"cells":[[null,"_"," ",null],["(","_","_",")"]]},{"ms":[500,1000],"random":true,"cells":[[null,"-",null],["(","_",")"]]}],"left":[{"ms":[500,1000],"random":true,"cells":[[null," ","_",null],["(","_","_",")"]]},{"ms":[500,1000],"random":true,"cells":[[null,"-",null],["(","_",")"]]}]},"move":{"right":[{"ms":[500,1000],"random":true,"cells":[[null,"_"," ",null],["(","_","_",")"]]},{"ms":[500,1000],"random":true,"cells":[[null,"-",null],["(","_",")"]]}],"left":[{"ms":[500,1000],"random":true,"cells":[[null," ","_",null],["(","_","_",")"]]},{"ms":[500,1000],"random":true,"cells":[[null,"-",null],["(","_",")"]]}]},"cooldown":{"right":[{"ms":[500,1000],"random":true,"cells":[[null,"_"," ",null],["(","_","_",")"]]},{"ms":[500,1000],"random":true,"cells":[[null,"-",null],["(","_",")"]]}],"left":[{"ms":[500,1000],"random":true,"cells":[[null," ","_",null],["(","_","_",")"]]},{"ms":[500,1000],"random":true,"cells":[[null,"-",null],["(","_",")"]]}]},"attack":{"right":[{"ms":30,"cells":[[null," ","_"," ",null],["(","_","_","_",")"]]},{"ms":30,"cells":[[null,null,"-",null,null],[null,"(","_",")",null]]}],"left":[{"ms":30,"cells":[[null," ","_"," ",null],["(","_","_","_",")"]]},{"ms":30,"cells":[[null,null,"-",null,null],[null,"(","_",")",null]]}]}}')},function(t,e,n){"use strict";function i(t){let e={};e.value=t,e.isDown=!1,e.isUp=!0,e.press=void 0,e.release=void 0,e.downHandler=t=>{t.key===e.value&&(e.isUp&&e.press&&e.press(),e.isDown=!0,e.isUp=!1,t.preventDefault())},e.upHandler=t=>{t.key===e.value&&(e.isDown&&e.release&&e.release(),e.isDown=!1,e.isUp=!0,t.preventDefault())};const n=e.downHandler.bind(e),i=e.upHandler.bind(e);return window.addEventListener("keydown",n,!1),window.addEventListener("keyup",i,!1),e.unsubscribe=()=>{window.removeEventListener("keydown",n),window.removeEventListener("keyup",i)},e}n.r(e);var s=function(t,e,n){this.name=t,this.seen=e,this.is_visible=n,this.char=r[this.name]},r={wall:"#",floor:"."},o=function(){function t(){this.tiles={}}return t.prototype.setTile=function(t,e,n,i,r){this.tiles[e]||(this.tiles[e]={}),this.tiles[e][t]=new s(n,i,r)},t.prototype.updateRoom=function(t){var e=this;t.forEach((function(t){var n=t[0],i=n[0],s=n[1],r=t[1],o=t[2],l=o[0],a=o[1];e.setTile(i,s,r,l,a)}))},t}(),l=function(){function t(){this.x=0,this.y=0,this.spriteState="idle",this.direction="right"}return t.prototype.update=function(t){var e;e=t.coords,this.x=e[0],this.y=e[1],this.spriteState=t.sprite_state,this.direction=t.direction,this.isVisible=t.is_visible},t.prototype.tickSpriteState=function(t){this.sprite.tick(t,this.spriteState,this.direction)},t}(),a=n(0);var u,c=function(){function t(t,e,n,i,s){this.isRandom=t,this.msFrom=e,this.msTo=n,this.cells=i,this.idx=s}return t.prototype.makeCurrentFrame=function(){var t,e,n=this.msFrom;return this.isRandom&&(t=this.msFrom,e=this.msTo,n=Math.floor(Math.random()*(e-t+1)+t)),new h(n,this.cells,this.idx,0)},t}(),h=function(t,e,n,i){this.ms=t,this.cells=e,this.idx=n,this.timer=i},p=function(){function t(t){this.states={},this.load(t),console.log("sprite states",this.states),this.currentState="idle",this.currentDirection="right",this.currentFrame=this.getCurrentStateFrames()[0].makeCurrentFrame()}return t.prototype.load=function(t){var e=this;console.log("loading sprite data",t),Object.entries(t).forEach((function(t){var n=t[0],i=t[1];e.states[n]={},Object.entries(i).forEach((function(t){var i=t[0],s=t[1];e.states[n][i]=[],s.forEach((function(t,s){var r=0,o=null;t.ms.length>1?(r=t.ms[0],o=t.ms[1]):r=t.ms,t=new c(t.random,r,o,t.cells,s),e.states[n][i].push(t)}))}))}))},t.prototype.getCurrentStateFrames=function(){return this.states[this.currentState][this.currentDirection]},t.prototype.getCells=function(){return this.currentFrame.cells},t.prototype.tick=function(t,e,n){if(!this.currentState||e!=this.currentState||n!=this.currentDirection){console.log("new state",this.currentState,this.currentDirection),this.currentState=e,this.currentDirection=n;var i=this.getCurrentStateFrames()[0];this.currentFrame=i.makeCurrentFrame()}if(this.currentFrame.timer+=t,this.currentFrame.timer>this.currentFrame.ms/1e3){var s=(this.currentFrame.idx+1)%this.getCurrentStateFrames().length;i=this.getCurrentStateFrames()[s];this.currentFrame=i.makeCurrentFrame()}},t}(),f=(u=function(t,e){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),d=function(t){function e(){var e=t.call(this)||this;return e.elementClass="player",e.hitPoints=100,e.sprite=new p(a),e}return f(e,t),e.prototype.update=function(e){t.prototype.update.call(this,e),e.hit_points<this.hitPoints&&(this.hitPoints=e.hit_points)},e}(l),m=n(1),y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),w={blob:function(t){function e(){var e=t.call(this)||this;return e.elementClass="blob",e.hitPoints=100,e.sprite=new p(m),e}return y(e,t),e}(l)};window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(t,1e3/30)},new(function(){function t(t,e){this.sizeX=70,this.sizeY=30,this.gameDiv=t,this.guiDiv=e,this.lines=[],this.room=new o,this.player=new d,this.otherPlayers={},this.entities={},this.socket=null,this.init(),this.initNetwork(),this.initKeys()}return t.prototype.updateStateFromNetwork=function(t){var e=this;t.data.map&&this.room.updateRoom(t.data.map),t.data.self&&this.player.update(t.data.self),t.data.players&&Object.entries(t.data.players).forEach((function(t){var n=t[0],i=t[1];e.otherPlayers[n]||(e.otherPlayers[n]=new d),e.otherPlayers[n].update(i)})),t.data.entities&&Object.entries(t.data.entities).forEach((function(t){var n=t[0],i=t[1];if(!e.entities[n]){var s=i.type;e.entities[n]=new w[s]}e.entities[n].update(i)}))},t.prototype.initNetwork=function(){var t=this;this.socket=new WebSocket("wss://ascii.kwoh.de/connect"),this.socket.onopen=function(e){t.socket.onmessage=function(e){var n=JSON.parse(e.data);switch(n.type){case"init":console.log("init package!"),t.updateStateFromNetwork(n),t.start();break;case"update":t.updateStateFromNetwork(n);break;case"remove_players":n.data.forEach((function(e){delete t.otherPlayers[e]}));break;case"remove_entities":n.data.forEach((function(e){delete t.entities[e]}));break;default:console.log("unknown package ",n)}}}},t.prototype.send=function(t,e){this.socket&&this.socket.send(JSON.stringify({type:t,data:e}))},t.prototype.initKeys=function(){var t=this,e=i("a"),n=i("w"),s=i("d"),r=i("s");e.press=function(){t.send("actions",{left:"press"})},e.release=function(){t.send("actions",{left:"release"})},n.press=function(){t.send("actions",{up:"press"})},n.release=function(){t.send("actions",{up:"release"})},s.press=function(){t.send("actions",{right:"press"})},s.release=function(){t.send("actions",{right:"release"})},r.press=function(){t.send("actions",{down:"press"})},r.release=function(){t.send("actions",{down:"release"})}},t.prototype.init=function(){this.runs=!1,this.gameObjects=[],this.fps(30)},t.prototype.fps=function(t){this.currentFps=t||this.currentFps;this.currentFps;return this.currentFps},t.prototype.start=function(){0===this.gameObjects.length&&console.warn("No gameObjects in the Game."),this.startTime=Date.now(),this.lastTick=Date.now(),this.runs=!0,this.play(),console.info("Gameloop is running")},t.prototype.clearLines=function(){this.lines=[];for(var t=0;t<this.sizeY;t++){for(var e=[],n=0;n<this.sizeX;n++)e.push(" ");this.lines.push(e)}},t.prototype.stop=function(){this.runs=!1,this.stopTime=Date.now(),console.info("Gameloop stopped")},t.prototype.deltaTime=function(){return.001*(Date.now()-this.lastTick)},t.prototype.drawEntity=function(t){var e=this,n=t.sprite.getCells();Object.entries(n).forEach((function(n){var i=n[0],s=n[1];Object.entries(s).forEach((function(n){var s=n[0],r=n[1];r&&e.drawWithPlayerOffset(r,t.elementClass,t.x+parseInt(s),t.y+parseInt(i))}))}))},t.prototype.drawWithPlayerOffset=function(t,e,n,i){var s=this.sizeX/2-this.player.x+n,r=this.sizeY/2-this.player.y+i;s>0&&s<this.sizeX&&r>0&&r<this.sizeY&&(this.lines[r][s]=e?'<span class="'+e+'">'+t+"</span>":t)},t.prototype.drawRoom=function(){var t=this;Object.entries(this.room.tiles).forEach((function(e){var n=e[0],i=e[1];Object.entries(i).forEach((function(e){var i=e[0],s=e[1],r=null;s.is_visible||(r="mapNotVisible"),t.drawWithPlayerOffset(s.char,r,parseInt(i),parseInt(n))}))}))},t.prototype.render=function(){var t=this;this.clearLines(),this.drawRoom(),this.drawEntity(this.player),Object.entries(this.otherPlayers).forEach((function(e){e[0];var n=e[1];t.drawEntity(n)})),Object.entries(this.entities).forEach((function(e){e[0];var n=e[1];t.drawEntity(n)}));var e=[];this.lines.forEach((function(t){e.push(t.join(""))})),this.gameDiv.innerHTML=e.join("\n"),this.guiDiv.innerHTML="fps: "+this.currentFps},t.prototype.update=function(){this.render();var t=this.deltaTime();this.player.tickSpriteState(t),Object.entries(this.otherPlayers).forEach((function(e){e[0];e[1].tickSpriteState(t)})),Object.entries(this.entities).forEach((function(e){e[0];var n=e[1];n.isVisible&&n.tickSpriteState(t)}))},t.prototype.play=function(){var t=this,e=function(){try{if(setTimeout((function(){window.requestAnimFrame(e)}),1e3/t.currentFps),t.update(),t.lastTick=Date.now(),!t.runs)return!1}catch(e){console.error(e.stack),t.stop()}};e()},t}())(document.getElementById("container"),document.getElementById("gui"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,